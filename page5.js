// ====================== page5.js ======================

// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
(function () {
  const root = (window.drugAllergyData = window.drugAllergyData || {});
  if (!root.page5) {
    root.page5 = {
      drugLines: [],
      adrLines: []
    };
  } else {
    root.page5.drugLines = Array.isArray(root.page5.drugLines)
      ? root.page5.drugLines
      : [];
    root.page5.adrLines = Array.isArray(root.page5.adrLines)
      ? root.page5.adrLines
      : [];
  }
})();

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 =====
window.renderPage5 = function () {
  const pageEl = document.getElementById("page5");
  if (!pageEl) return;

  const store = window.drugAllergyData.page5;
  const drugs = store.drugLines;
  const adrs = store.adrLines;

  // ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ----------
  let html = `
    <div class="p5-wrapper">
      <div class="p5-header-line">
        <h2>üìÖ ‡∏´‡∏ô‡πâ‡∏≤ 5 Timeline ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏¢‡∏≤</h2>
        <div class="p5-btn-group">
          <button id="p5AddDrug" class="p5-btn-add-drug">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤</button>
          <button id="p5AddAdr" class="p5-btn-add-adr">+ ‡πÄ‡∏û‡∏¥‡πà‡∏° ADR</button>
        </div>
      </div>

      <!-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤ -->
      <div class="p5-form-block">
        <h3 style="display:flex;align-items:center;gap:.5rem;margin:0 0 .5rem;">
          <span style="font-size:1.3rem;">üíä</span> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤
        </h3>
        ${drugs
          .map((d, idx) => {
            return `
            <div class="p5-drug-card" data-idx="${idx}">
              <div class="p5-field">
                <label>‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà ${idx + 1}</label>
                <input type="text" class="p5-drug-name" value="${d.name || ""}" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤" />
              </div>
              <div class="p5-field">
                <label>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏≤</label>
                <input type="date" class="p5-drug-start" value="${d.startDate || ""}" />
              </div>
              <div class="p5-field">
                <label>‡πÄ‡∏ß‡∏•‡∏≤</label>
                <input type="time" class="p5-drug-start-time" value="${d.startTime || ""}" />
              </div>
              <div class="p5-field">
                <label>‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤</label>
                <input type="date" class="p5-drug-stop" value="${d.stopDate || ""}" />
              </div>
              <div class="p5-field">
                <label>‡πÄ‡∏ß‡∏•‡∏≤</label>
                <input type="time" class="p5-drug-stop-time" value="${d.stopTime || ""}" />
              </div>
              <div class="p5-field" style="align-self:center;">
                <button class="p5-line-del" data-kind="drug" data-idx="${idx}">‡∏•‡∏ö</button>
              </div>
            </div>
          `;
          })
          .join("")}
      </div>

      <!-- ADR -->
      <div class="p5-form-block">
        <h3 style="display:flex;align-items:center;gap:.5rem;margin:0 0 .5rem;">
          <span style="font-size:1.3rem;">üß™</span> ADR (Adverse Drug Reaction)
        </h3>
        ${adrs
          .map((a, idx) => {
            return `
            <div class="p5-adr-card" data-idx="${idx}">
              <div class="p5-field">
                <label>ADR ${idx + 1} (‡∏≠‡∏≤‡∏Å‡∏≤‡∏£)</label>
                <input type="text" class="p5-adr-symptom" value="${a.symptom || ""}" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏∑‡πà‡∏ô, ‡∏ö‡∏ß‡∏°, ‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å" />
              </div>
              <div class="p5-field">
                <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                <input type="date" class="p5-adr-start" value="${a.startDate || ""}" />
              </div>
              <div class="p5-field">
                <label>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
                <input type="time" class="p5-adr-start-time" value="${a.startTime || ""}" />
              </div>
              <div class="p5-field">
                <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢</label>
                <input type="date" class="p5-adr-end" value="${a.endDate || ""}" />
              </div>
              <div class="p5-field">
                <label>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢</label>
                <input type="time" class="p5-adr-end-time" value="${a.endTime || ""}" />
              </div>
              <div class="p5-field" style="align-self:center;">
                <button class="p5-line-del" data-kind="adr" data-idx="${idx}">‡∏•‡∏ö</button>
              </div>
            </div>
          `;
          })
          .join("")}
      </div>

      <!-- ‡∏Å‡∏•‡πà‡∏≠‡∏á Timeline -->
      <div class="p5-timeline-box">
        <h3>Visual Timeline</h3>
        <div id="p5TimelineScroll">
          <div id="p5DateRow"></div>
          <div class="p5-lane">
            <div class="p5-lane-label">‡∏¢‡∏≤</div>
            <div id="p5DrugLane"></div>
          </div>
          <div class="p5-lane">
            <div class="p5-lane-label p5-lane-adr">ADR</div>
            <div id="p5AdrLane"></div>
          </div>
        </div>
      </div>

      <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πà‡∏≤‡∏á -->
      <div class="p5-footer-btns">
        <button id="p5GoSummary" class="p5-next">‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ 6 (‡∏™‡∏£‡∏∏‡∏õ)</button>
        <button id="p5Clear" class="p5-clear">‡∏•‡πâ‡∏≤‡∏á & ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà</button>
      </div>
    </div>
  `;

  pageEl.innerHTML = html;

  // ---------- ‡∏ú‡∏π‡∏Å event ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏™‡πà HTML ‡πÅ‡∏•‡πâ‡∏ß ----------

  // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤
  const btnAddDrug = document.getElementById("p5AddDrug");
  if (btnAddDrug) {
    btnAddDrug.addEventListener("click", function () {
      window.drugAllergyData.page5.drugLines.push({
        name: "",
        startDate: "",
        startTime: "",
        stopDate: "",
        stopTime: ""
      });
      window.renderPage5();
    });
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° ADR
  const btnAddAdr = document.getElementById("p5AddAdr");
  if (btnAddAdr) {
    btnAddAdr.addEventListener("click", function () {
      window.drugAllergyData.page5.adrLines.push({
        symptom: "",
        startDate: "",
        startTime: "",
        endDate: "",
        endTime: ""
      });
      window.renderPage5();
    });
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  const delBtns = pageEl.querySelectorAll(".p5-line-del");
  delBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      const kind = this.dataset.kind;
      const idx = Number(this.dataset.idx);
      if (kind === "drug") {
        window.drugAllergyData.page5.drugLines.splice(idx, 1);
      } else if (kind === "adr") {
        window.drugAllergyData.page5.adrLines.splice(idx, 1);
      }
      window.renderPage5();
    });
  });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input (‡∏¢‡∏≤)
  pageEl.querySelectorAll(".p5-drug-card").forEach((card) => {
    const idx = Number(card.dataset.idx);
    const nameInput = card.querySelector(".p5-drug-name");
    const startInput = card.querySelector(".p5-drug-start");
    const stopInput = card.querySelector(".p5-drug-stop");

    if (nameInput)
      nameInput.addEventListener("input", (e) => {
        window.drugAllergyData.page5.drugLines[idx].name = e.target.value;
        drawTimeline();
      });
    if (startInput)
      startInput.addEventListener("change", (e) => {
        window.drugAllergyData.page5.drugLines[idx].startDate = e.target.value;
        drawTimeline();
      });
    if (stopInput)
      stopInput.addEventListener("change", (e) => {
        window.drugAllergyData.page5.drugLines[idx].stopDate = e.target.value;
        drawTimeline();
      });
  });

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input (ADR)
  pageEl.querySelectorAll(".p5-adr-card").forEach((card) => {
    const idx = Number(card.dataset.idx);
    const symInput = card.querySelector(".p5-adr-symptom");
    const startInput = card.querySelector(".p5-adr-start");
    const endInput = card.querySelector(".p5-adr-end");

    if (symInput)
      symInput.addEventListener("input", (e) => {
        window.drugAllergyData.page5.adrLines[idx].symptom = e.target.value;
        drawTimeline();
      });
    if (startInput)
      startInput.addEventListener("change", (e) => {
        window.drugAllergyData.page5.adrLines[idx].startDate = e.target.value;
        drawTimeline();
      });
    if (endInput)
      endInput.addEventListener("change", (e) => {
        window.drugAllergyData.page5.adrLines[idx].endDate = e.target.value;
        drawTimeline();
      });
  });

  // ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ 6
  const go6 = document.getElementById("p5GoSummary");
  if (go6) {
    go6.addEventListener("click", () => {
      const tabBtn = document.querySelector('.tabs button[data-target="page6"]');
      if (tabBtn) tabBtn.click();
      if (window.renderPage6) window.renderPage6();
    });
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const clearBtn = document.getElementById("p5Clear");
  if (clearBtn) {
    clearBtn.addEventListener("click", () => {
      window.drugAllergyData.page5 = { drugLines: [], adrLines: [] };
      window.renderPage5();
    });
  }

  // ‡∏ß‡∏≤‡∏î timeline ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  drawTimeline();
};

// ===== drawTimeline ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏±‡∏Å‡∏õ‡∏•‡∏≤‡∏¢ 2 ‡∏ß‡∏±‡∏ô =====
function drawTimeline() {
  try {
    const dateRow = document.getElementById("p5DateRow");
    const drugLane = document.getElementById("p5DrugLane");
    const adrLane = document.getElementById("p5AdrLane");
    if (!dateRow || !drugLane || !adrLane) return;

    const root = window.drugAllergyData || {};
    const page5 = root.page5 || { drugLines: [], adrLines: [] };

    const drugs = Array.isArray(page5.drugLines) ? page5.drugLines : [];
    const adrs = Array.isArray(page5.adrLines) ? page5.adrLines : [];

    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ö
    if (!drugs.length && !adrs.length) {
      dateRow.innerHTML = "";
      drugLane.innerHTML = "";
      adrLane.innerHTML = "";
      return;
    }

    const MS_DAY = 24 * 60 * 60 * 1000;
    const DAY_W = 120;

    function parseDate(str) {
      if (!str) return null;
      const pure = String(str).trim().split(" ")[0];
      if (pure.includes("/")) {
        const [d, m, y] = pure.split("/").map(Number);
        if (!d || !m || !y) return null;
        return new Date(y, m - 1, d);
      }
      if (pure.includes("-")) {
        const [y, m, d] = pure.split("-").map(Number);
        if (!y || !m || !d) return null;
        return new Date(y, m - 1, d);
      }
      return null;
    }

    function addDays(date, n) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + n);
    }

    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

    // 1) ‡∏´‡∏≤ minDate
    let minDate = null;
    drugs.forEach((d) => {
      const s = parseDate(d.startDate || d.start || d.giveDate);
      if (s && (!minDate || s < minDate)) minDate = s;
    });
    adrs.forEach((a) => {
      const s = parseDate(a.startDate || a.eventDate || a.symptomDate);
      if (s && (!minDate || s < minDate)) minDate = s;
    });
    if (!minDate) minDate = today;

    // maxDate = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const maxDate = today;

    // 2) ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const totalDays = Math.floor((maxDate - minDate) / MS_DAY) + 1;
    dateRow.innerHTML = "";
    for (let i = 0; i < totalDays; i++) {
      const d = addDays(minDate, i);
      const cell = document.createElement("div");
      cell.className = "p5-date-cell";
      cell.style.width = DAY_W + "px";
      cell.textContent = d.toLocaleDateString("th-TH", {
        day: "numeric",
        month: "short",
      });
      dateRow.appendChild(cell);
    }

    // 3) ‡∏•‡πâ‡∏≤‡∏á lane
    drugLane.innerHTML = "";
    adrLane.innerHTML = "";

    function dateToLeftPx(date) {
      const diffDay = Math.floor((date - minDate) / MS_DAY);
      return diffDay * DAY_W;
    }

    function calcWidthPx(startDate, endDate) {
      const diffDay = Math.floor((endDate - startDate) / MS_DAY);
      const days = diffDay + 1;
      let w = days * DAY_W;
      if (w < DAY_W * 0.6) w = DAY_W * 0.6;
      return w;
    }

    function trimEndMinus2(startDate, endDate) {
      // ‡∏´‡∏±‡∏Å‡∏≠‡∏≠‡∏Å 2 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤‡∏¢
      let trimmed = addDays(endDate, -2);
      // ‡∏ñ‡πâ‡∏≤‡∏´‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß < start ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤ start
      if (trimmed < startDate) {
        trimmed = startDate;
      }
      return trimmed;
    }

    // 4) ‡∏ß‡∏≤‡∏î‡∏¢‡∏≤
    drugs.forEach((d, idx) => {
      const start = parseDate(d.startDate || d.start || d.giveDate);
      if (!start) return;

      const endRaw = d.stopDate || d.endDate || d.stop;
      let endDate = endRaw ? parseDate(endRaw) : maxDate;
      if (!endDate) endDate = maxDate;

      if (endDate < start) endDate = start;
      if (endDate > maxDate) endDate = maxDate;

      const finalEnd = trimEndMinus2(start, endDate);

      const bar = document.createElement("div");
      bar.className = "p5-bar p5-bar-drug";
      bar.textContent = d.name || d.drugName || `‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà ${idx + 1}`;
      bar.style.left = dateToLeftPx(start) + "px";
      bar.style.width = calcWidthPx(start, finalEnd) + "px";
      drugLane.appendChild(bar);
    });

    // 5) ‡∏ß‡∏≤‡∏î ADR
    adrs.forEach((a, idx) => {
      const start = parseDate(a.startDate || a.eventDate || a.symptomDate);
      if (!start) return;

      const endRaw = a.endDate || a.resolveDate;
      let endDate = endRaw ? parseDate(endRaw) : maxDate;
      if (!endDate) endDate = maxDate;
      if (endDate < start) endDate = start;
      if (endDate > maxDate) endDate = maxDate;

      const finalEnd = trimEndMinus2(start, endDate);

      const bar = document.createElement("div");
      bar.className = "p5-bar p5-bar-adr";
      bar.textContent = a.symptom || a.name || `ADR ${idx + 1}`;
      bar.style.left = dateToLeftPx(start) + "px";
      bar.style.width = calcWidthPx(start, finalEnd) + "px";
      adrLane.appendChild(bar);
    });

    // 6) ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
    const sw = document.getElementById("p5TimelineScroll");
    if (sw) {
      sw.scrollLeft = sw.scrollWidth;
    }
  } catch (err) {
    // ‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏û‡∏±‡∏á
    console.warn("drawTimeline error:", err);
  }
}
