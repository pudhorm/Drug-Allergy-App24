// page5.js
(function () {
  // helper: ‡πÅ‡∏õ‡∏•‡∏á yyyy-mm-dd -> Date
  function parseDateFromInput(el) {
    if (!el) return null;
    const v = el.value;
    if (!v) return null;
    // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å <input type="date"> ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô yyyy-mm-dd ‡πÄ‡∏™‡∏°‡∏≠
    const parts = v.split("-");
    if (parts.length !== 3) return null;
    const y = Number(parts[0]);
    const m = Number(parts[1]);
    const d = Number(parts[2]);
    if (!y || !m || !d) return null;
    return new Date(y, m - 1, d);
  }

  // helper: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
  function normalize(d) {
    const dd = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    return dd;
  }

  // helper: ‡∏ß‡∏±‡∏ô‡πÑ‡∏ó‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ
  const TH_MONTH = [
    "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
    "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
  ];
  function formatThai(d) {
    return d.getDate() + " " + TH_MONTH[d.getMonth()];
  }

  function renderPage5() {
    const host = document.getElementById("page5");
    if (!host) return;
    host.innerHTML = `
      <div class="p5-wrapper card">
        <div class="p5-glitter-layer"></div>

        <!-- 1) ‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏≤ -->
        <section class="tl-section tl-bg-soft" aria-label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤">
          <div class="tl-head">
            <h2 class="tl-title">‡∏¢‡∏≤</h2>
            <button type="button" class="btn-green-solid" id="tl-add-drug">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà</button>
          </div>
          <div id="tl-drug-list"></div>
        </section>

        <!-- 2) ‡∏™‡πà‡∏ß‡∏ô ADR -->
        <section class="tl-section tl-bg-soft-red" aria-label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ADR">
          <div class="tl-head">
            <h2 class="tl-title">ADR (Adverse Drug Reaction)</h2>
            <button type="button" class="btn-red-solid" id="tl-add-adr">+ ‡πÄ‡∏û‡∏¥‡πà‡∏° ADR</button>
          </div>
          <div id="tl-adr-list"></div>

          <div class="tl-actions-under-adr">
            <button type="button" class="btn-blue-solid" id="tl-build">‚ñ∂ ‡∏™‡∏£‡πâ‡∏≤‡∏á Timeline</button>
          </div>
        </section>

        <!-- 3) ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• timeline -->
        <section class="tl-section" aria-label="‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥ timeline">
          <h2 class="tl-title">Visual Timeline</h2>
          <div id="tl-scroll" class="tl-scroll hidden">
            <div id="tl-ticks" class="tl-ticks"></div>
            <div id="tl-canvas" class="tl-canvas"></div>
          </div>
        </section>

        <!-- 4) ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ -->
        <div class="tl-bottom-actions">
          <button type="button" id="tl-print" class="btn-green-solid">üñ®Ô∏è Print / PDF</button>
          <button type="button" id="tl-next" class="btn-purple-solid">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ 6</button>
          <button type="button" id="tl-clear" class="btn-red-solid">üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ</button>
        </div>
      </div>
    `;

    const drugList = host.querySelector("#tl-drug-list");
    const adrList = host.querySelector("#tl-adr-list");
    const btnAddDrug = host.querySelector("#tl-add-drug");
    const btnAddAdr = host.querySelector("#tl-add-adr");
    const btnBuild = host.querySelector("#tl-build");
    const btnClear = host.querySelector("#tl-clear");
    const btnPrint = host.querySelector("#tl-print");

    // ‡πÉ‡∏´‡πâ‡∏°‡∏µ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    addDrugRow(drugList);
    addAdrRow(adrList);

    btnAddDrug.addEventListener("click", () => addDrugRow(drugList));
    btnAddAdr.addEventListener("click", () => addAdrRow(adrList));

    btnBuild.addEventListener("click", () => {
      buildTimeline(host);
    });

    btnClear.addEventListener("click", () => {
      drugList.innerHTML = "";
      adrList.innerHTML = "";
      addDrugRow(drugList);
      addAdrRow(adrList);
      const scroll = host.querySelector("#tl-scroll");
      scroll.classList.add("hidden");
      scroll.querySelector("#tl-ticks").innerHTML = "";
      scroll.querySelector("#tl-canvas").innerHTML = "";
    });

    btnPrint.addEventListener("click", () => {
      // ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ 5
      window.print();
    });
  }

  function addDrugRow(container) {
    const wrap = document.createElement("div");
    wrap.className = "tl-card";
    wrap.innerHTML = `
      <label class="tl-label">‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
        <input type="text" class="tl-input" data-role="drug-name" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤" />
      </label>
      <div class="tl-grid2">
        <div>
          <label>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏≤</label>
          <div class="tl-inline">
            <input type="date" class="tl-input" data-role="drug-start-date" placeholder="‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ" />
            <input type="time" class="tl-input" data-role="drug-start-time" />
          </div>
        </div>
        <div>
          <label>‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤</label>
          <div class="tl-inline">
            <input type="date" class="tl-input" data-role="drug-stop-date" placeholder="‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ" />
            <input type="time" class="tl-input" data-role="drug-stop-time" />
          </div>
        </div>
      </div>
      <button type="button" class="tl-del">‡∏•‡∏ö</button>
    `;
    wrap.querySelector(".tl-del").addEventListener("click", () => {
      container.removeChild(wrap);
    });
    container.appendChild(wrap);
  }

  function addAdrRow(container) {
    const wrap = document.createElement("div");
    wrap.className = "tl-card";
    wrap.innerHTML = `
      <label class="tl-label">‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
        <input type="text" class="tl-input" data-role="adr-name" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏∑‡πà‡∏ô, ‡∏Ñ‡∏±‡∏ô, ‡∏ö‡∏ß‡∏°" />
      </label>
      <div class="tl-grid2">
        <div>
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
          <div class="tl-inline">
            <input type="date" class="tl-input" data-role="adr-start-date" placeholder="‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ" />
            <input type="time" class="tl-input" data-role="adr-start-time" />
          </div>
        </div>
        <div>
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢</label>
          <div class="tl-inline">
            <input type="date" class="tl-input" data-role="adr-end-date" placeholder="‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ" />
            <input type="time" class="tl-input" data-role="adr-end-time" />
          </div>
        </div>
      </div>
      <button type="button" class="tl-del">‡∏•‡∏ö</button>
    `;
    wrap.querySelector(".tl-del").addEventListener("click", () => {
      container.removeChild(wrap);
    });
    container.appendChild(wrap);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á timeline ‡∏à‡∏£‡∏¥‡∏á
  function buildTimeline(root) {
    const drugCards = Array.from(root.querySelectorAll("#tl-drug-list .tl-card"));
    const adrCards = Array.from(root.querySelectorAll("#tl-adr-list .tl-card"));

    const items = [];
    const today = new Date();
    const todayNorm = normalize(today);

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏¢‡∏≤
    drugCards.forEach((card, idx) => {
      const name = card.querySelector("[data-role='drug-name']").value.trim();
      const sDateEl = card.querySelector("[data-role='drug-start-date']");
      const eDateEl = card.querySelector("[data-role='drug-stop-date']");
      const s = parseDateFromInput(sDateEl);
      const e = parseDateFromInput(eDateEl);

      if (!name || !s) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏≤‡∏î
        return;
      }

      const start = normalize(s);
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‚Üí ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      let end = e ? normalize(e) : todayNorm;
      // ‡∏ñ‡πâ‡∏≤‡∏î‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
      if (end < start) end = start;

      items.push({
        kind: "drug",
        label: "‡∏¢‡∏≤: " + name,
        name: name,
        start,
        end,
      });
    });

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å ADR
    adrCards.forEach((card, idx) => {
      const name = card.querySelector("[data-role='adr-name']").value.trim();
      const sDateEl = card.querySelector("[data-role='adr-start-date']");
      if (!name && !sDateEl.value) return; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏¢ ‡∏Ç‡πâ‡∏≤‡∏°

      const s = parseDateFromInput(sDateEl);
      const e = parseDateFromInput(card.querySelector("[data-role='adr-end-date']"));

      if (!s) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏ß‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô

      const start = normalize(s);
      let end = e ? normalize(e) : todayNorm;
      if (end < start) end = start;

      items.push({
        kind: "adr",
        label: "ADR: " + name,
        name: name,
        start,
        end,
      });
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏ß‡πå
    const scroll = root.querySelector("#tl-scroll");
    if (!items.length) {
      scroll.classList.add("hidden");
      scroll.querySelector("#tl-ticks").innerHTML = "";
      scroll.querySelector("#tl-canvas").innerHTML = "";
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    let minDate = items[0].start;
    let maxDate = items[0].end;
    items.forEach((it) => {
      if (it.start < minDate) minDate = it.start;
      if (it.end > maxDate) maxDate = it.end;
    });
    // ‡∏ï‡πâ‡∏≠‡∏á plot ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠
    if (todayNorm > maxDate) {
      maxDate = todayNorm;
    }

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const days = [];
    let cur = new Date(minDate.getTime());
    while (cur <= maxDate) {
      days.push(new Date(cur.getTime()));
      cur.setDate(cur.getDate() + 1);
    }

    // ‡∏ß‡∏≤‡∏î‡πÅ‡∏Å‡∏ô X
    const ticksBox = scroll.querySelector("#tl-ticks");
    ticksBox.innerHTML = "";
    const pxPerDay = 112; // ‡∏¢‡∏∑‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏±‡∏ß/‡∏ó‡πâ‡∏≤‡∏¢
    const totalWidth = days.length * pxPerDay + 180; // + ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ Y label

    ticksBox.style.position = "relative";
    ticksBox.style.height = "28px";
    ticksBox.style.minWidth = totalWidth + "px";

    days.forEach((d, i) => {
      const span = document.createElement("div");
      span.className = "tl-tick";
      span.textContent = formatThai(d);
      span.style.left = (180 + i * pxPerDay) + "px";
      ticksBox.appendChild(span);
    });

    // ‡∏ß‡∏≤‡∏î‡πÅ‡∏ñ‡∏ö
    const canvas = scroll.querySelector("#tl-canvas");
    canvas.innerHTML = "";
    canvas.style.position = "relative";
    canvas.style.minWidth = totalWidth + "px";

    items.forEach((it, idx) => {
      const row = document.createElement("div");
      row.className = "tl-row";
      row.style.top = idx * 58 + "px"; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß
      row.style.position = "relative";

      const yLabel = document.createElement("div");
      yLabel.className = "tl-ylabel";
      yLabel.textContent = it.label;
      row.appendChild(yLabel);

      const track = document.createElement("div");
      track.className = "tl-track";
      row.appendChild(track);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‚Üí index
      const startIndex = Math.floor((it.start - minDate) / (1000 * 60 * 60 * 24));
      const endIndex = Math.floor((it.end - minDate) / (1000 * 60 * 60 * 24));

      const bar = document.createElement("div");
      bar.className = "tl-bar " + (it.kind === "adr" ? "adr" : "drug");
      bar.textContent = (it.name ? it.name : (it.kind === "adr" ? "ADR" : "‡∏¢‡∏≤")) +
        " (" + it.start.toISOString().slice(0, 10) + ")";
      bar.style.left = (180 + startIndex * pxPerDay) + "px";
      // +1 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏≠‡∏î‡∏µ
      const barWidth = Math.max(1, (endIndex - startIndex + 1)) * pxPerDay - 22;
      bar.style.width = barWidth + "px";

      track.appendChild(bar);
      canvas.appendChild(row);
    });

    // ‡∏™‡∏π‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items
    canvas.style.height = items.length * 58 + "px";

    // ‡πÇ‡∏ä‡∏ß‡πå
    scroll.classList.remove("hidden");
  }

  // expose
  window.renderPage5 = renderPage5;
})();
