// page5.js
(function () {
  // ‡∏ñ‡πâ‡∏≤ data.js ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡πÑ‡∏ß‡πâ ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ
  if (!window.drugAllergyData) {
    window.drugAllergyData = {};
  }
  if (!window.drugAllergyData.timeline) {
    window.drugAllergyData.timeline = {
      drugs: [],
      adrs: []
    };
  }

  // ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ----------
  const TH_MONTH = [
    "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
    "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
  ];

  function toDate(v) {
    if (!v) return null;
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2025-11-01 ‡πÅ‡∏•‡∏∞ 01/11/2025
    if (v.includes("/")) {
      const [d, m, y] = v.split("/");
      return new Date(Number(y), Number(m) - 1, Number(d));
    }
    return new Date(v);
  }

  function addDays(d, n) {
    const x = new Date(d.getFullYear(), d.getMonth(), d.getDate());
    x.setDate(x.getDate() + n);
    return x;
  }

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
  function nowThaiDate() {
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + ‡πÉ‡∏ä‡πâ offset ‡πÑ‡∏ó‡∏¢
    const now = new Date();
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏ó‡∏¢ (+7)
    const utc = now.getTime() + now.getTimezoneOffset() * 60000;
    const th = new Date(utc + 7 * 60 * 60000);
    return th;
  }

  function fmtThaiDateLong(d) {
    const day = d.getDate();
    const month = TH_MONTH[d.getMonth()];
    const year = d.getFullYear() + 543;
    return `‡∏ß‡∏±‡∏ô${["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå","‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","‡∏®‡∏∏‡∏Å‡∏£‡πå","‡πÄ‡∏™‡∏≤‡∏£‡πå"][d.getDay()]}‡∏ó‡∏µ‡πà ${day} ${month} ‡∏û.‡∏®. ${year}`;
  }

  function fmtTime(d) {
    const h = d.getHours().toString().padStart(2, "0");
    const m = d.getMinutes().toString().padStart(2, "0");
    const s = d.getSeconds().toString().padStart(2, "0");
    return `${h}:${m}:${s}`;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  function diffDays(a, b) {
    const aa = new Date(a.getFullYear(), a.getMonth(), a.getDate());
    const bb = new Date(b.getFullYear(), b.getMonth(), b.getDate());
    return Math.round((bb - aa) / 86400000);
  }

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ end ‡πÑ‡∏°‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤ start
  function clampEnd(start, end) {
    if (end < start) return new Date(start.getFullYear(), start.getMonth(), start.getDate());
    return end;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡∏≤ 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á
  function renderDrugForm(idx, drug) {
    return `
      <div class="p5-drug-card" data-drug-index="${idx}">
        <div class="p5-field">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤</label>
          <input type="text" class="p5-drug-name" value="${drug.name || ""}" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô Amoxicillin" />
        </div>
        <div class="p5-two-cols">
          <div class="p5-field">
            <label>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏≤</label>
            <div class="p5-inline">
              <input type="date" class="p5-drug-start" value="${drug.startDate || ""}">
              <input type="time" class="p5-drug-start-time" value="${drug.startTime || ""}">
            </div>
          </div>
          <div class="p5-field">
            <label>‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤</label>
            <div class="p5-inline">
              <input type="date" class="p5-drug-end" value="${drug.endDate || ""}">
              <input type="time" class="p5-drug-end-time" value="${drug.endTime || ""}">
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á ADR 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á
  function renderAdrForm(idx, adr) {
    return `
      <div class="p5-adr-card" data-adr-index="${idx}">
        <div class="p5-field">
          <label>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£</label>
          <input type="text" class="p5-adr-name" value="${adr.name || ""}" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏∑‡πà‡∏ô, ‡∏Ñ‡∏±‡∏ô, ‡∏ö‡∏ß‡∏°" />
        </div>
        <div class="p5-two-cols">
          <div class="p5-field">
            <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î</label>
            <div class="p5-inline">
              <input type="date" class="p5-adr-start" value="${adr.startDate || ""}">
              <input type="time" class="p5-adr-start-time" value="${adr.startTime || ""}">
            </div>
          </div>
          <div class="p5-field">
            <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢</label>
            <div class="p5-inline">
              <input type="date" class="p5-adr-end" value="${adr.endDate || ""}">
              <input type="time" class="p5-adr-end-time" value="${adr.endTime || ""}">
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // ‡∏ß‡∏≤‡∏î timeline ‡∏à‡∏£‡∏¥‡∏á
  function drawTimeline(root) {
    const box = root.querySelector(".p5-timeline-body");
    const { drugs, adrs } = window.drugAllergyData.timeline;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
    const entries = [];

    drugs.forEach((d) => {
      if (!d.startDate) return;
      const start = toDate(d.startDate);
      if (!start) return;

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å 1 ‡∏ß‡∏±‡∏ô
      let end;
      if (d.endDate) {
        end = addDays(toDate(d.endDate), -1);
      } else {
        // ongoing ‚Üí ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - 1
        end = addDays(nowThaiDate(), -1);
      }
      end = clampEnd(start, end);

      entries.push({
        kind: "drug",
        label: d.name || "‡∏¢‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
        start,
        end
      });
    });

    adrs.forEach((a) => {
      if (!a.startDate) return;
      const start = toDate(a.startDate);
      if (!start) return;

      let end;
      if (a.endDate) {
        end = addDays(toDate(a.endDate), -1);
      } else {
        end = addDays(nowThaiDate(), -1);
      }
      end = clampEnd(start, end);

      entries.push({
        kind: "adr",
        label: a.name || "ADR ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        start,
        end
      });
    });

    if (entries.length === 0) {
      box.innerHTML = `<p class="p5-empty-tl">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timeline ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ</p>`;
      return;
    }

    // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°-‡∏ß‡∏±‡∏ô‡∏à‡∏ö‡∏£‡∏ß‡∏° (‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° -1 ‡∏ß‡∏±‡∏ô)
    let minStart = entries[0].start;
    let maxEnd = entries[0].end;
    entries.forEach((e) => {
      if (e.start < minStart) minStart = e.start;
      if (e.end > maxEnd) maxEnd = e.end;
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô
    minStart = addDays(minStart, -1);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const totalDays = diffDays(minStart, maxEnd) + 1;
    const DAY_W = 110; // px ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    const innerW = totalDays * DAY_W;

    let dateRowHtml = `<div class="p5-date-row" style="width:${innerW}px">`;
    for (let i = 0; i < totalDays; i++) {
      const d = addDays(minStart, i);
      dateRowHtml += `<div class="p5-date-cell">${d.getDate()} ${TH_MONTH[d.getMonth()]}</div>`;
    }
    dateRowHtml += `</div>`;

    // ‡πÅ‡∏ñ‡∏ß timeline
    let laneHtml = "";
    entries.forEach((e, idx) => {
      const offsetDays = diffDays(minStart, e.start);
      const spanDays = diffDays(e.start, e.end) + 1; // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -1 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
      const left = offsetDays * DAY_W;
      const width = Math.max(spanDays * DAY_W - 12, 60); // ‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0
      const colorClass = e.kind === "drug" ? "p5-bar-drug" : "p5-bar-adr";

      laneHtml += `
        <div class="p5-lane">
          <div class="p5-lane-label ${e.kind === "adr" ? "p5-lane-adr" : ""}">${e.kind === "adr" ? "ADR:" : "‡∏¢‡∏≤:"} ${e.label}</div>
          <div class="p5-lane-track" style="width:${innerW}px">
            <div class="p5-bar ${colorClass}" style="left:${left}px;width:${width}px;">
              ${e.label} (${e.start.getFullYear()}-${(e.start.getMonth()+1).toString().padStart(2,"0")}-${e.start.getDate().toString().padStart(2,"0")})
            </div>
          </div>
        </div>
      `;
    });

    box.innerHTML = `
      <div class="p5-tl-scroll">
        ${dateRowHtml}
        ${laneHtml}
      </div>
    `;
  }

  // ---------- render ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ----------
  window.renderPage5 = function () {
    const host = document.getElementById("page5");
    if (!host) return;

    host.innerHTML = `
      <div class="p5-shell">
        <div class="p5-header-line">
          <h2>‡∏´‡∏ô‡πâ‡∏≤ 5 Timeline ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏¢‡∏≤</h2>
          <div class="p5-btn-group">
            <button class="p5-btn-add-drug">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà</button>
            <button class="p5-btn-del-drug">‡∏•‡∏ö‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</button>
            <button class="p5-btn-add-adr red">+ ‡πÄ‡∏û‡∏¥‡πà‡∏° ADR</button>
            <button class="p5-btn-del-adr">‡∏•‡∏ö ADR ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</button>
          </div>
        </div>

        <div class="p5-form-block p5-drug-block">
          <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤</h3>
          <div class="p5-drug-list"></div>
        </div>

        <div class="p5-form-block p5-adr-block">
          <h3>ADR (Adverse Drug Reaction)</h3>
          <div class="p5-adr-list"></div>
        </div>

        <div class="p5-action-line">
          <button class="p5-btn-build">‚ñ∂ ‡∏™‡∏£‡πâ‡∏≤‡∏á Timeline</button>
        </div>

        <div class="p5-nowbar">
          <span class="p5-now-icon">üìÖ</span>
          <span class="p5-now-text">--</span>
        </div>

        <div class="p5-timeline-box">
          <h3>Visual Timeline</h3>
          <div class="p5-timeline-body"></div>
        </div>

        <div class="p5-footer-btns">
          <button class="p5-print">üñ® Print / PDF</button>
          <button class="p5-next">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ 6</button>
          <button class="p5-clear">üóë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ</button>
        </div>
      </div>
    `;

    const data = window.drugAllergyData.timeline;
    const drugListEl = host.querySelector(".p5-drug-list");
    const adrListEl = host.querySelector(".p5-adr-list");

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏ä‡∏ß‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°
    function refreshForms() {
      // ‡∏¢‡∏≤
      drugListEl.innerHTML = data.drugs.map((d, i) => renderDrugForm(i, d)).join("");
      // ADR
      adrListEl.innerHTML = data.adrs.map((a, i) => renderAdrForm(i, a)).join("");

      // bind ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
      drugListEl.querySelectorAll(".p5-drug-card").forEach((card) => {
        const idx = Number(card.dataset.drugIndex);
        card.querySelector(".p5-drug-name").addEventListener("input", (e) => {
          data.drugs[idx].name = e.target.value;
        });
        card.querySelector(".p5-drug-start").addEventListener("input", (e) => {
          data.drugs[idx].startDate = e.target.value;
        });
        card.querySelector(".p5-drug-start-time").addEventListener("input", (e) => {
          data.drugs[idx].startTime = e.target.value;
        });
        card.querySelector(".p5-drug-end").addEventListener("input", (e) => {
          data.drugs[idx].endDate = e.target.value;
        });
        card.querySelector(".p5-drug-end-time").addEventListener("input", (e) => {
          data.drugs[idx].endTime = e.target.value;
        });
      });

      adrListEl.querySelectorAll(".p5-adr-card").forEach((card) => {
        const idx = Number(card.dataset.adrIndex);
        card.querySelector(".p5-adr-name").addEventListener("input", (e) => {
          data.adrs[idx].name = e.target.value;
        });
        card.querySelector(".p5-adr-start").addEventListener("input", (e) => {
          data.adrs[idx].startDate = e.target.value;
        });
        card.querySelector(".p5-adr-start-time").addEventListener("input", (e) => {
          data.adrs[idx].startTime = e.target.value;
        });
        card.querySelector(".p5-adr-end").addEventListener("input", (e) => {
          data.adrs[idx].endDate = e.target.value;
        });
        card.querySelector(".p5-adr-end-time").addEventListener("input", (e) => {
          data.adrs[idx].endTime = e.target.value;
        });
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ 1 ‡∏ä‡πà‡∏≠‡∏á
    if (data.drugs.length === 0) {
      data.drugs.push({ name: "", startDate: "", startTime: "", endDate: "", endTime: "" });
    }
    if (data.adrs.length === 0) {
      data.adrs.push({ name: "", startDate: "", startTime: "", endDate: "", endTime: "" });
    }
    refreshForms();
    drawTimeline(host);

    // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    host.querySelector(".p5-btn-add-drug").addEventListener("click", () => {
      data.drugs.push({ name: "", startDate: "", startTime: "", endDate: "", endTime: "" });
      refreshForms();
    });
    host.querySelector(".p5-btn-del-drug").addEventListener("click", () => {
      if (data.drugs.length > 0) {
        data.drugs.pop();
        refreshForms();
      }
    });
    host.querySelector(".p5-btn-add-adr").addEventListener("click", () => {
      data.adrs.push({ name: "", startDate: "", startTime: "", endDate: "", endTime: "" });
      refreshForms();
    });
    host.querySelector(".p5-btn-del-adr").addEventListener("click", () => {
      if (data.adrs.length > 0) {
        data.adrs.pop();
        refreshForms();
      }
    });

    host.querySelector(".p5-btn-build").addEventListener("click", () => {
      drawTimeline(host);
    });

    host.querySelector(".p5-clear").addEventListener("click", () => {
      data.drugs = [{ name: "", startDate: "", startTime: "", endDate: "", endTime: "" }];
      data.adrs = [{ name: "", startDate: "", startTime: "", endDate: "", endTime: "" }];
      refreshForms();
      drawTimeline(host);
    });

    host.querySelector(".p5-print").addEventListener("click", () => {
      window.print();
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤ ‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏ö‡∏ö real-time
    const nowTextEl = host.querySelector(".p5-now-text");
    function updateNow() {
      const d = nowThaiDate();
      nowTextEl.textContent = `${fmtThaiDateLong(d)} ‡πÄ‡∏ß‡∏•‡∏≤ ${fmtTime(d)}`;
    }
    updateNow();
    setInterval(updateNow, 1000);
  };
})();
